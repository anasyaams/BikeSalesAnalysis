USE Bike_Sales

--List all products: Write a query to retrieve all product names and their corresponding brand names
SELECT 
	product_name, brand_name
FROM 
	products, brands

--Find active staff: Write a query to find all active staff members and their store names
SELECT
	first_name, last_name, store_name
FROM
	staffs, stores
WHERE
	active = '1'

--Customer details: Write a query to list all customers with their full names, email, and phone number
SELECT
	first_name, last_name, email, phone
FROM
	customers

--Product categories: Write a query to count the number of products in each category
SELECT
	category_name, COUNT(1) AS num_product
FROM
	categories AS c 
JOIN products AS p
	ON p.category_id = c.category_id
GROUP BY
	category_name

--Orders by customer: Write a query to list the total number of orders placed by each customer
SELECT
	c.customer_id, c.first_name, c.last_name, COUNT(1) AS num_order
FROM
	customers as c
INNER JOIN orders as o
	ON o.customer_id = c.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name 
ORDER BY 2 ASC


--Total sales per product: Write a query to calculate the total sales amount for each product (considering quantity, list price, and discount)
SELECT
	oi.product_id, 
	p.product_name, 
	quantity, 
	oi.list_price, 
	discount, 
	oi.list_price*(1-discount) AS price_after_discount,
	SUM((oi.list_price*(1-discount))*quantity) AS total_amount
FROM
	order_items as oi
JOIN
	products as p
	on oi.product_id = p.product_id
GROUP BY oi.product_id, 
	p.product_name, 
	oi.quantity, 
	oi.list_price, 
	discount
ORDER BY oi.product_id, 
	p.product_name, 
	oi.quantity ASC

--Orders by status: Write a query to count the number of orders for each order status
SELECT
	order_status, COUNT(1) as num_orders
FROM
	orders
GROUP BY
	order_status
ORDER BY order_status ASC

--Customer orders: Write a query to list all customers who have placed at least one order, including their full name and total number of orders
SELECT
	c.customer_id, c.first_name, c.last_name, COUNT(1) AS num_order
FROM
	customers AS c
JOIN
	orders AS o
	ON c.customer_id = o.customer_id
GROUP BY
	c.customer_id, c.first_name, c.last_name
ORDER BY
	c.customer_id ASC

--Stock availability: Write a query to find the total quantity of each product available in all stores
SELECT
	PARSE(s.product_id AS int), p.product_name, SUM(PARSE(s.quantity AS int)) AS total_product_in_stores
FROM
	stocks AS s
	INNER JOIN products AS p
	ON s.product_id = p.product_id
GROUP BY 
	PARSE(s.product_id AS int), p.product_name
ORDER BY
	PARSE(s.product_id AS int) ASC

--Revenue by store: Write a query to calculate the total revenue generated by each store
SELECT
	s.store_id, s.store_name, s.state,SUM((oi.list_price*(1-discount))*quantity) AS total_sales_per_store
FROM
	order_items AS oi
	INNER JOIN orders AS o
		ON oi.order_id = o.order_id
	INNER JOIN products AS p
		ON oi.product_id = p.product_id
	INNER JOIN stores AS s
		ON o.store_id = s.store_id
GROUP BY
	s.store_id, s.store_name, s.state
ORDER BY
	s.store_id ASC


--Monthly sales analysis: Write a query to calculate the total sales amount for each month
SELECT MONTH(order_date) [month], 
	SUM(PARSE(quantity AS int)) AS unit_sold
FROM orders AS o
	INNER JOIN order_items AS oi
		ON o.order_id = oi.order_id
GROUP BY MONTH(order_date)
ORDER BY MONTH(order_date) ASC

SELECT YEAR(order_date) [year],
	MONTH(order_date) [month], 
	SUM(PARSE(quantity AS int)) AS unit_sold
FROM orders AS o
	INNER JOIN order_items AS oi
		ON o.order_id = oi.order_id
GROUP BY YEAR(order_date), MONTH(order_date)
ORDER BY YEAR(order_date), MONTH(order_date) ASC

--Top customers: Write a query to find the top 5 customers who have spent the most money
SELECT TOP(5)
	c.customer_id, c.first_name, c.last_name, SUM((oi.list_price*(1-discount))*quantity) AS total_spending
FROM customers AS c
	INNER JOIN orders AS o
		ON c.customer_id = o.customer_id
	INNER JOIN order_items AS oi
		ON o.order_id = oi.order_id
GROUP BY
	c.customer_id, c.first_name, c.last_name 
ORDER BY
	SUM((oi.list_price*(1-discount))*quantity) DESC

--to check
SELECT
	o.order_id, c.customer_id, c.first_name, c.last_name, oi.product_id, oi.list_price, oi.discount, oi.quantity, 
	SUM((oi.list_price*(1-discount))*quantity) AS total_spending
FROM customers AS c
	INNER JOIN orders AS o
		ON c.customer_id = o.customer_id
	INNER JOIN order_items AS oi
		ON o.order_id = oi.order_id
WHERE
    c.customer_id = 94 OR c.customer_id = 10 OR
    c.customer_id = 75 OR c.customer_id = 6 OR
    c.customer_id = 16
GROUP BY
	o.order_id, c.customer_id, c.first_name, c.last_name, oi.product_id, oi.list_price, oi.discount, oi.quantity
ORDER BY 
	SUM((oi.list_price*(1-discount))*quantity) DESC

--Employee hierarchy: Write a query to list all staff members along with their managers' names
SELECT
	s1.staff_id, s1.first_name + ' ' + s1.last_name AS staff_name, s2.manager_id, s2.first_name + ' ' + s2.last_name AS manager_name
FROM
	staffs AS s1
	LEFT JOIN staffs AS s2
	ON s1.manager_id = s2.staff_id
ORDER BY PARSE(s1.staff_id AS int) ASC

--Product performance: Write a query to determine which products have the highest sales volume in the current year
SELECT
	p.product_id, p.product_name, SUM(PARSE(oi.quantity AS int)) AS total_sales
FROM
	products AS p
	INNER JOIN order_items AS oi
	ON p.product_id = oi.product_id
	INNER JOIN orders AS o
	ON o.order_id = oi.order_id
WHERE 
	YEAR(o.order_date) = '2018'
GROUP BY
	p.product_id, p.product_name
ORDER BY
	SUM(PARSE(oi.quantity AS int)) DESC

--Customer location analysis: Write a query to count the number of customers in each city and state
SELECT
	c.state, c.city, COUNT(c.customer_id) AS num_of_cust,
	SUM((oi.list_price*(1-discount))*quantity) AS total_sales,
	AVG((oi.list_price*(1-discount))*quantity) AS avg_sales,
	MAX((oi.list_price*(1-discount))*quantity) AS max_sales
FROM
	customers AS c
JOIN orders AS o
	ON c.customer_id = o.customer_id
	JOIN order_items AS oi
	ON o.order_id = oi.order_id
GROUP BY
	c.state, c.city
ORDER BY
	c.state ASC


--Order fulfillment: Write a query to find the average number of days taken to ship orders after the required date
SELECT
	YEAR(order_date) [order_year], 
	COALESCE(shipped_date, 'unknown') AS shipped_date,
	COUNT(1) AS num_order
FROM
	orders
WHERE
	COALESCE(shipped_date, 'unknown') = 'unknown'
GROUP BY
	YEAR(order_date), COALESCE(shipped_date, 'unknown')

SELECT
	order_id, order_date,
	COALESCE(shipped_date, 'need update') AS shipped_status
FROM
	orders
WHERE
	COALESCE(shipped_date, 'need update') = 'need update'

--Customer order patterns: Write a query to identify customers who placed orders in each month for the last six months
SELECT
	YEAR(order_date) AS shipped_year,
	MONTH(order_date) AS shipped_month,
	c.customer_id
FROM
	customers AS c
	JOIN orders AS o
	ON c.customer_id = o.customer_id
WHERE
	YEAR(order_date) = '2018' AND
	MONTH(order_date) >= '06'
ORDER BY
	YEAR(order_date), MONTH(order_date) ASC 

--Sales growth: Write a query to calculate the month-over-month sales growth for the past year
--all years
SELECT
	YEAR(o.order_date) [order_year],
	MONTH(o.order_date) [order_month],
	SUM(PARSE(oi.quantity AS int)) AS num_quantity,
	SUM((oi.list_price*(1-discount))*quantity) AS total_amount
FROM orders AS o
	JOIN order_items AS oi
	ON o.order_id = oi.order_id
GROUP BY
	YEAR(o.order_date), MONTH(o.order_date)
ORDER BY
	YEAR(o.order_date), MONTH(o.order_date)

--2016
SELECT
	YEAR(o.order_date) [order_year],
	MONTH(o.order_date) [order_month],
	SUM(PARSE(oi.quantity AS int)) AS num_quantity,
	SUM((oi.list_price*(1-discount))*quantity) AS total_amount,
	LAG(SUM(oi.quantity * oi.list_price * (1 - oi.discount)), 1) OVER (ORDER BY MONTH(o.order_date)) AS prev_sales_amount,
	CASE
        WHEN LAG(SUM(oi.quantity * oi.list_price * (1 - oi.discount)), 1) OVER (ORDER BY MONTH(o.order_date))
		IS NULL THEN NULL  -- Handle the first month case
        ELSE (1.0 * (SUM((oi.list_price*(1-discount))*quantity) - LAG(SUM(oi.quantity * oi.list_price * (1 - oi.discount)), 1) 
		OVER (ORDER BY MONTH(o.order_date))) / LAG(SUM(oi.quantity * oi.list_price * (1 - oi.discount)), 1) 
		OVER (ORDER BY MONTH(o.order_date))) * 100.0
    END AS sales_growth_percent
FROM orders AS o
	JOIN order_items AS oi
	ON o.order_id = oi.order_id
WHERE YEAR(o.order_date) = '2016'
GROUP BY
	YEAR(o.order_date), MONTH(o.order_date)
ORDER BY
	YEAR(o.order_date), MONTH(o.order_date)

--2017
SELECT
	YEAR(o.order_date) [order_year],
	MONTH(o.order_date) [order_month],
	SUM(PARSE(oi.quantity AS int)) AS num_quantity,
	SUM((oi.list_price*(1-discount))*quantity) AS total_amount,
	LAG(SUM(oi.quantity * oi.list_price * (1 - oi.discount)), 1) OVER (ORDER BY MONTH(o.order_date)) AS prev_sales_amount,
	CASE
        WHEN LAG(SUM(oi.quantity * oi.list_price * (1 - oi.discount)), 1) OVER (ORDER BY MONTH(o.order_date))
		IS NULL THEN NULL  -- Handle the first month case
        ELSE (1.0 * (SUM((oi.list_price*(1-discount))*quantity) - LAG(SUM(oi.quantity * oi.list_price * (1 - oi.discount)), 1) 
		OVER (ORDER BY MONTH(o.order_date))) / LAG(SUM(oi.quantity * oi.list_price * (1 - oi.discount)), 1) 
		OVER (ORDER BY MONTH(o.order_date))) * 100.0
    END AS sales_growth_percent
FROM orders AS o
	JOIN order_items AS oi
	ON o.order_id = oi.order_id
WHERE YEAR(o.order_date) = '2017'
GROUP BY
	YEAR(o.order_date), MONTH(o.order_date)
ORDER BY
	YEAR(o.order_date), MONTH(o.order_date)

--Store stock levels: Write a query to find stores that have stock levels below a certain threshold for any product
SELECT TOP(15)
	oi.product_id, 
	p.product_name,
	p.brand_id,
	SUM(PARSE(oi.quantity AS int)) AS num_quantity, 
	oi.list_price, 
	discount, 
	oi.list_price*(1-discount) AS price_after_discount,
	SUM((oi.list_price*(1-discount))*quantity) AS total_amount
FROM
	order_items as oi
JOIN
	products as p
	on oi.product_id = p.product_id
GROUP BY oi.product_id, 
	p.product_name, 
	p.brand_id, 
	oi.list_price, 
	discount
ORDER BY total_amount DESC
